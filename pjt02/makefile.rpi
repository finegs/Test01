#CXX      := -g++
#CXXFLAGS := -pedantic-errors -Wall -Wextra -Werror
#CXXFLAGS := -std=c++17 -Wall -Wextra -Werror -static
#CXXFLAGS := -std=c++17 -Wall -Wextra
#LDFLAGS  := -L/usr/lib -lstdc++ -lm -lws2_32 -pthread

DEFAULT_TARGET := aa

ifeq ($(strip $(TARGET)),)
    TARGET := $(DEFAULT_TARGET)
endif

TARGET_SRC := $(TARGET:%=%.cpp)

ifeq ($(wildcard $(TARGET_SRC)),)
	CXX    := -gcc
    CXXFLAGS := -std=c99 -Wall -Wextra
else
	CXX    := -g++
    CXXFLAGS := -std=c++17 -Wall -Wextra
endif

ifeq ($(OS), Windows_NT)
	LDFLAGS  := -lws2_32 -pthread
	TARGET   := $(TARGET:%=%.exe)
else
	LDFLAGS  := -L /usr/local/lib -pthread -lwiringPi -lm -lcrypt -lrt
    TARGET   := $(TARGET)
endif

BUILD    := build

ifeq ($(OS), Windows_NT)
	OBJ_DIR  := $(BUILD)\objs
	APP_DIR  := $(BUILD)\apps
else
	OBJ_DIR  := $(BUILD)/objs
	APP_DIR  := $(BUILD)/apps
endif

INCLUDE  := -I include -I /usr/local/include

ifeq ($(CXX), -g++)
    SRC_INC  := mutil.cpp
endif

#skip files
SKIP_FILE := $(wildcard Test*.cpp)
SKIP_FILE += b.cpp c.cpp s1.cpp
#SRC      :=                      \
#	$(wildcard src/module1/*.cpp) \
#	$(wildcard src/module2/*.cpp) \
#	$(wildcard src/module3/*.cpp) \
#	$(wildcard src/*.cpp)         \
#	$(wildcard *.cpp)
#SRC		:= $(filter-out $(SKIP_FILE) , $(SRC))

#include other source files
SRC = $(SRC_INC)

ifeq ($(OS), Windows_NT)
	ifeq ($(CXX), -g++)
		SRC+=$(TARGET:%.exe=%.cpp)
	else
		SRC+=$(TARGET:%.exe=%.c)
	endif

	CLN:=clean_win
	BLD:=build_win
	RELEASE_APP:=release_app_win
else

	ifeq ($(CXX), -g++)
		SRC+=$(TARGET:%=%.cpp)
	else
		SRC+=$(TARGET:%=%.c)
	endif

	CLN:=clean_oth
	BLD:=build_oth
	RELEASE_APP:=release_app_oth
endif

#objects for other source files
#OBJECTS = $(SRC:%.cpp=$(OBJ_DIR)/%.o)
ifeq ($(CXX), -g++)
	OBJS    = $(SRC:%.cpp=%.o)
else
	OBJS    = $(SRC:%.c=%.o)
endif

#all
all: $(TARGET)

#	@mkdir -p $(@D)
$(OBJS):$(SRC)
#	@IF NOT EXIST $(@D) mkdir $(@D)
#	@echo "SRS IS "$(SRC)
#	$(CXX) $(CXXFLAGS) $(INCLUDE) -o $@ -c $<
#	$(CXX) -c $? $(CXXFLAGS) $(INCLUDE)
	$(CXX) -c $^ $(CXXFLAGS) $(INCLUDE)

#	@mkdir -p $(@D)
$(TARGET):$(OBJS)
	$(CXX) $^ $(INCLUDE) $(LDFLAGS) -o $@

#	@mkdir -p $(@D)
#$(OBJ_DIR)/%.o: %.cpp
#	@IF NOT EXIST $(@D) mkdir $(@D)
#	$(CXX) $(CXXFLAGS) $(INCLUDE) -o $@ -c $<

.PHONY: clean all

build_win:
	@IF NOT EXIST $(BUILD) ( mkdir $(BUILD) )
	@IF NOT EXIST $(APP_DIR) ( mkdir $(APP_DIR) )
	@IF NOT EXIST $(OBJ_DIR) ( mkdir $(OBJ_DIR) )

build_oth:
	@mkdir -p $(BUILD)
	@mkdir -p $(OBJ_DIR)
	@mkdir -p $(APP_DIR)


debug: CXXFLAGS += -DDEBUG -g
debug: all

release: CXXFLAGS += -O2
release: all

release_app_win:
	copy /Y $(APP_DIR)\$(TARGET) $(TARGET)

release_app_oth:
	@cp $(APP_DIR)/$(TARGET) $(TARGET)

clean:$(CLN)

clean_win:
	@echo starting clean 
	@del /F /Q *.o
	@del /F /Q $(TARGET)
#	-@IF EXIST $(OBJ_DIR) ( del /S /F /Q $(OBJ_DIR)\*.o )
#	-@IF EXIST $(APP_DIR) ( del /S /F /Q $(APP_DIR)\$(TARGET) )
#	-@IF EXIST $(TARGET) ( del /F /Q $(TARGET) )
	@echo complete clean

clean_oth:
	@echo starting clean 
	@rm -rf *.o
	@rm -rf $(TARGET)
#	@rm -rf $(OBJ_DIR)/*.o
#	@rm -rf $(APP_DIR)/$(TARGET)
#	@rm -f $(TARGET)
	@echo complete clean

uninstall_win:
	@echo starting $(@)
	@if exist $(TARGET) ( del /F /Q $(TARGET))
	@echo complete $(@)

uninstall_oth:
	@echo starting $(@)
	@rm -f $(TARGET)
	@echo complete $(@)

